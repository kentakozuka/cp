#include <iostream>
#include <vector>
using namespace std;

using ll = long long;

int main() {
  ll n = 3;

  // bit全探索
  // N個のものから、いくつか選ぶ方法を全列挙して調べ上げる手法
  // O(n*2^n)
  // {0, 1, ..., n-1} の部分集合の全探索
  // (1<<N)は2^Nの意味
  // 「<<」はビット演算子で、ビット（2進数）を左へシフトする。
  // int型は透過的に整数として扱えるが、実際に内部ではbitで管理されている。
  // 例えば3を8bitで保持するのであれば、0b00000011になる（2進数は先頭に0bをつける）。
  // (0b00000001)を左へ3ビットシフトする場合は1<<3と書き、結果は8(0b00001000)となる。
  for (ll bit = 0; bit < (1 << n); ++bit) {
    vector<ll> S;
    for (ll i = 0; i < n; i++) {
      // 列挙に i が含まれるか
      // (1<<i): i桁目のみが1で他は0であるようなビット列である
      // bit & (1<<i):
      // i桁目のみを残して他の桁はすべてふるい落として0にしてしまう処理である
      //
      // bitのi桁目が1であれば、bit & (1<<i) のi桁目が1で残ります
      // (他の桁はすべて0) bitのi桁目が0であれば、bit & (1<<i)
      // のi桁目が0になります (すべての桁が0)
      if (bit & (1 << i)) {
        S.push_back(i);
      }
    }
    cout << bit << ": {";
    for (ll i = 0; i < (ll)S.size(); ++i) {
      cout << S[i] << " ";
    }
    cout << "}" << endl;
  }
}